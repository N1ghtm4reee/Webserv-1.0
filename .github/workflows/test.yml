name: Webserv CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # build-and-test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build Docker image
  #       run: docker build -t webserv .

  #     - name: Run tests inside container
  #       run: docker run --rm webserv test

  # clang-tidy-check:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install clang-tidy
  #       run: sudo apt-get update && sudo apt-get install -y clang-tidy

  #     - name: Install bear for compilation database
  #       run: sudo apt-get install -y bear

  #     - name: Generate Compilation Database
  #       run: bear -- make -j$(nproc)

  #     - name: Run clang-tidy
  #       run: find ../ -name '*.cpp' | xargs clang-tidy -p .
        # -warnings-as-errors='*'

  dast-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3
      
      - name: Build application
        run: docker build -t webserv .
      
      - name: Run application container
        run: docker run -d --name webserv -p 8080:8080 webserv
      
      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          for i in {1..60}; do
            if curl -f -s http://localhost:8080 > /dev/null 2>&1; then
              echo "Application is ready!"
              break
            fi
            echo "Waiting for application... ($i/60)"
            sleep 2
          done
          
          # Verify it's actually working
          if ! curl -f -s http://localhost:8080 > /dev/null 2>&1; then
            echo "Application failed to start properly"
            docker logs webserv
            exit 1
          fi
      
      - name: Get container IP
        id: container-ip
        run: |
          CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' webserv)
          echo "container_ip=$CONTAINER_IP" >> $GITHUB_OUTPUT
          echo "Container IP: $CONTAINER_IP"
      
      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://${{ steps.container-ip.outputs.container_ip }}:8080'
          cmd_options: '-a'
          fail_action: false
      
      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v4
        with:
          name: ZAP-DAST-Report
          path: |
            report_html.html
            report_json.json
            report_md.md
        if: always()
      
      - name: Show container logs (if needed)
        run: docker logs webserv
        if: failure()
      
      - name: Cleanup
        run: |
          docker stop webserv || true
          docker rm webserv || true
        if: always()